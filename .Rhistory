pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
# First construct 2:t matrix of I and R (add row of 0s at the end to make same size as I and R)
I_next <- rbind(I[2:t,], rep(0,3))
R_next <- rbind(R[2:t,], rep(0,3))
# Next calculate the increase in infected group plus those who moved into recovered state
n_I <- I_next - I + R_next - R
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
# First construct 2:t matrix of I and R (add row of 0s at the end to make same size as I and R)
I_next <- rbind(I[2:t,], rep(0,3))
R_next <- rbind(R[2:t,], rep(0,3))
# Next calculate the increase in infected group plus those who moved into recovered state
n_I <- I_next - I + R_next - R
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
system.time(epi <- covid_model())
View(epi)
## Plotting results
par(mfcol=c(1,1),mar=c(4,4,1,1))
plot_covid_model_graphs()
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*105, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*105, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*105, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*105, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
## Plotting results
par(mfcol=c(1,1),mar=c(4,4,1,1))
plot_covid_model_graphs()
a <- matrix(0,3, 2)
b <- matrix(0, 2, 2)
b <- matrix(1, 2, 2)
a-b
b <- matrix(1, 3, 2)
a-b
a[-1]
a
a[-1:-2]
a[-1,]
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
I_next <- rbind(I[2:t,], rep(0,3)) # First construct 2:t matrix of I and R (add row of 0s at the end to make same size as I and R)
R_next <- rbind(R[2:t,], rep(0,3))
n_I <- I_next - I + R_next - R # Next calculate the increase in infected group plus those who moved into recovered state
n_I <- n_I[-1,] # Removing redundant last row
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
system.time(epi <- covid_model())
par(mfcol=c(1,1),mar=c(4,4,1,1))
plot_covid_model_graphs()
View(epi)
epi[["new_infections"]]
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
I_prev <- rbind(rep(0,3), I[1:t-1,]) # Construct matrix to represent previous day's infections, add row of 0s at the beginning as no infections before t=1
R_prev <- rbind(rep(0,3), R[1:t-1,]) # Same as above for recoveries
n_I <- I - I_prev + R - R_prev # Next calculate the increase in infected group plus those who moved into recovered state
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
system.time(epi <- covid_model())
View(epi)
summary(epi$new_infections_std)
epi[["new_infections_std"]]
epi[["new_infections"]]
View(epi)
epi[["new_infections"]]
plot_covid_model_graphs()
?matrix
?runif
?matrix
u <- matrix(runif(10*3), nrow = 3, ncol = 10)
u
u[1,]
drop(u[1,])
u[1,] < 0.5
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
u <- matrix(runif(n*(t-1), nrow = (t-1), ncol = n)) # Generate probabilities for each n over t-1 periods (first period already defined)
for (i in 2:t){ # simulation of model over days 2 to t
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate probability of moving from susceptible to exposed state
#### Moving between states during day
pop[pop==2&u[i-1,] < i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u[i-1,] < e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u[i-1,] < s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
I_prev <- rbind(rep(0,3), I[1:t-1,]) # Construct matrix to represent previous day's infections, add row of 0s at the beginning as no infections before t=1
R_prev <- rbind(rep(0,3), R[1:t-1,]) # Same as above for recoveries
n_I <- I - I_prev + R - R_prev # Next calculate the increase in infected group plus those who moved into recovered state
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
system.time(epi <- covid_model())
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
u <- matrix(runif(n*(t-1)), nrow = (t-1), ncol = n) # Generate probabilities for each n over t-1 periods (first period already defined)
for (i in 2:t){ # simulation of model over days 2 to t
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate probability of moving from susceptible to exposed state
#### Moving between states during day
pop[pop==2&u[i-1,] < i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u[i-1,] < e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u[i-1,] < s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
I_prev <- rbind(rep(0,3), I[1:t-1,]) # Construct matrix to represent previous day's infections, add row of 0s at the beginning as no infections before t=1
R_prev <- rbind(rep(0,3), R[1:t-1,]) # Same as above for recoveries
n_I <- I - I_prev + R - R_prev # Next calculate the increase in infected group plus those who moved into recovered state
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
## Running the model once
system.time(epi <- covid_model())
View(epi)
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*105, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*105, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*105, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*105, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
plot_covid_model_graphs()
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
R <- matrix(0, nrow = t, ncol = 3) # matrix to record infected col 1) population, 2) lowest 10% betas 3) random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1, 1] <- ni # No of population infected at end of day 1
I[1, 2] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
I[1, 3] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i, 1] <- sum(pop==2)
R[i, 1] <- sum(pop==3)
I[i, 2] <- sum(pop[low_beta] == 2)
R[i, 2] <- sum(pop[low_beta] == 3)
I[i, 3] <- sum(pop[random_0.1p] == 2)
R[i, 3] <- sum(pop[random_0.1p] == 3)
}
# Calculating new daily infections
I_prev <- rbind(rep(0,3), I[1:t-1,]) # Construct matrix to represent previous day's infections, add row of 0s at the beginning as no infections before t=1
R_prev <- rbind(rep(0,3), R[1:t-1,]) # Same as above for recoveries
n_I <- I - I_prev + R - R_prev # Next calculate the increase in infected group plus those who moved into recovered state
list(new_infections = n_I[,1],
new_infections_betas = n_I[,2],
new_infections_sample = n_I[,3],
new_infections_std = n_I[,1]/n, # new infections as proportion of total population
new_infections_betas_std = n_I[,2]/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_I[,3]/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
system.time(epi <- covid_model())
plot_covid_model_graphs()
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*105, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*110, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*105, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*105, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*110, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
plot_covid_model_graphs()
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*103, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*103, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*108, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*103, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*103, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*108, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
plot_covid_model_graphs()
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*104, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*104, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*107, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*104, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*104, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*107, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
plot_covid_model_graphs()
plot_covid_model_graphs <- function(var1 = epi$new_infections_std, var2 = epi$new_infections_betas_std, var3 = epi$new_infections_sample_std, labels = TRUE) {
plot(var1*100, # plotting points for var 1
ylim=c(0,max(var1*100, var2*100, var3*100)+0.3), # making the limit of the y axis the largest of all 3 vars plus room for visual purposes
xlab="Day of Epidemic",ylab="Daily Indicence (as % of population/sub-population)") # setting axes title's
points(var2*100, col="chocolate3"); points(var3*100, col= "blue") # plotting points for var2 and var3
lines(var1*100); lines(var2*100, col="chocolate3"); lines(var3*100, col= "blue") # plotting lines for vars 1, 2 & 3
if(labels == TRUE){ # option to turn off title and text on plots, default is on
title(main = "Daily new infections among whole Population, a 0.1% random sample, and the cautious 10%") # setting title for plot
peak_var1 <- which(var1 == max(var1)) # day of peak for var 1
peak_var2 <- which(var2 == max(var2)) # day of peak for var 2
peak_var3 <- which(var3 == max(var3)) # day of peak for var 3
text(y = max(var1)*104, x = peak_var1, paste("Day ", peak_var1), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*104, x = peak_var2, paste("Day ", peak_var2), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*109, x = peak_var3, paste("Day ", peak_var3), cex = 1.2, col= "blue") # plotting peak for var 3
text(y = max(var1)*104, x = peak_var1*.5, paste("Population incidence peak: ", round(max(var1)*100,2),"%"), cex = 1.2) # plotting peak for var 1
text(y = max(var2)*104, x = peak_var2*.5, paste("Cautious 10% incidence peak: ", round(max(var2)*100,2),"%"), cex = 1.2, col="chocolate3") # plotting peak for var 2
text(y = max(var3)*109, x = peak_var3*.5, paste("Random 0.1% incidence peak: ", round(max(var3)*100,2),"%"), cex = 1.2, col= "blue") # plotting peak for var 3
}
}
plot_covid_model_graphs()
covid_model <- function(n = 5.5e+6, beta = beta, lamda = 0.4/n, t = 150, ni = 10){
# Notation used: susceptible state = 0, exposed state = 1, infected state = 2, and recovered/transition to serious disease = 3
beta = rlnorm(n, 0, 0.5) # Initialise individual betas
beta = beta/mean(beta) # standardising betas to have mean 1 over population
pop <- rep(0,n) # Initialise susceptible state for entire population
pop[sample(1:n, ni)] <- 2 # randomly infect ni people in population
I <- R <- Ibeta <- Rbeta <- Isam <- Rsam <- rep(0, t) # empty vectors to record infected and recovered in population, lowest 10% betas and random .1% of pop
n_I <- n_Ibeta <- n_Isam <- rep(0, t) # empty vectors to record daily new infections in population, lowest 10% betas and random .1% of pop
low_beta <- beta <= quantile(beta, probs = 0.1) # finding lowest 10% of betas
random_0.1p <- sample(n, n*0.001) # picking random 0.1% sample of population
I[1] <- ni # No of population infected at end of day 1
Ibeta[1] <- sum(pop[low_beta] == 2) # No of low betas infected at end of day 1
Isam[1] <- sum(pop[random_0.1p] == 2) # No of sample infected at end of day 1
n_I[1] <- I[1] # New infections in day 1
n_Ibeta[1] <- Ibeta[1]  # New infections among lowest 10% betas in day 1
n_Isam[1] <- Isam[1] # New infections among selected 0.1% sample in day 1
e_to_i <- 1/3 # creating probability person moves from state exposed to infected
i_to_r <- 1/5 # creating probability person moves from state infected to recovered
for (i in 2:t){ # simulation of model over days 2 to t
#### Start of day - initialise probabilities
u <- runif(n) # generate chance of moving to next state in day i
s_to_e <- lamda * beta * sum(beta[pop==2]) # generate individual prob moving to exposed state (from day i to j)
#### Moving between states during day
pop[pop==2&u<i_to_r] <- 3 # move to state R if individual u < 1/5,
pop[pop==1&u<e_to_i] <- 2 # move to state I if individual u < 1/3,
pop[pop==0&u<s_to_e] <- 1 # move to state E if individual u < individual probability of becoming infected
#### End of day counts
I[i] <- sum(pop==2)
R[i] <- sum(pop==3)
Ibeta[i] <- sum(pop[low_beta] == 2)
Rbeta[i] <- sum(pop[low_beta] == 3)
Isam[i] <- sum(pop[random_0.1p] == 2)
Rsam[i] <- sum(pop[random_0.1p] == 3)
# Calculating new infections
n_I[i] <- I[i] - I[i-1] + R[i] - R[i-1] # Increase in infected group plus those who moved into recovered state
n_Ibeta[i] <- Ibeta[i] - Ibeta[i-1] + Rbeta[i] - Rbeta[i-1] # as above for low betas
n_Isam[i] <- Isam[i] - Isam[i-1] + Rsam[i] - Rsam[i-1] # as above for 0.1% random sample
}
list(new_infections = n_I,
new_infections_betas = n_Ibeta,
new_infections_sample = n_Isam,
new_infections_std = n_I/n, # new infections as proportion of total population
new_infections_betas_std = n_Ibeta/sum(beta <= quantile(beta, probs = 0.1)), # new infections as proportion of bottom 10% beta population
new_infections_sample_std = n_Isam/(0.001*n)  # new infections as proportion of 0.1% of population
)
}
## Running the model once
system.time(epi <- covid_model())
plot_covid_model_graphs()
